<% if !cookies[:knows_controls] %>
  <% cookies[:knows_controls] = "yes" %>
  <div class="banner">
    <%= t('restored_object.viewer.banner_info') %>
  </div>
<% end %>
<%= form_for(@object) do |f| %>
  <div id="info-toggle" class="pointer" onclick="showInfo()">
    <i class="fas fa-info fa-2x"></i>
  </div>
  <section id="info-container">
    <div class="branding padding-toolbar">
      <i class="fas fa-times right" onclick="hideInfo()"></i>
      <p>
        <% @object.categories.each do |category| %>
          <span class="badge badge-pill badge-light"><%= category.name %></span>
        <% end %>
      </p>
      <h1><%= @object.title %></h1>
      <% if @object.author %>
        <h2><%= t('restored_object.viewer.by') %> <%= @object.author %></h2>
      <% end %>
      <h3>
        <% @object.materials.each do |material| %>
          <span class="badge badge-pill badge-light"><%= material.name %></span>
        <% end %>
      </h3>
      <small>
          <% if @object.in_inventory %>
              <%= @object.inventory_no %>
          <% else %>
              <%= t('restored_object.viewer.not_inventory') %>
          <% end %>
      </small>
    </div>
    <div class="toolbar-container padding-toolbar">
      <div class="row">
          <div class="col-sm-6">
              <div class="info-field">
                  <% if @object.state %>
                      <%= f.label :state %><br/>
                      <%= @object.state.name%>
                  <% end %>
              </div>
              <div class="info-field">
                  <%= f.label :priority %><br/>
                  <%= @object.priority.name %>
              </div>
          </div>
          <div class="col-sm-6">
              <div class="info-field">
                  <%= f.label :protection %><br/>
                  <%= @object.protection.name %><br/>
              </div>
              <div class="info-field">
                  <%= f.label :dimensions %>
                  <p><%= dimensions(@object) %></p>
              </div>
          </div>
      </div>
      <% if @object.deteriorations.count > 0 %>
          <%= f.label :deteriorations %>
          <div class="info-field">
              <% @object.deteriorations.each do |deterioration| %>
                  <%= deterioration.name %><br/>
              <% end %>
          </div>
      <% end %>
      <% if !@object.description.blank? %>
        <div class="info-field">
          <%= f.label :description %>
          <p><%= @object.description %></p>
        </div>
      <% end %>
      <% if !@object.epoch.blank? %>
        <div class="info-field">
          <%= f.label :epoch %>
          <p><%= @object.epoch %></p>
        </div>
      
      <% end %>
      <% if !@object.classification.blank? %>
      <div class="info-field">
        <%= f.label :classification %>
        <p><%= @object.classification %></p>
      </div>
      <% end %>
      <% if !@object.technique.blank? %>
      <div class="info-field">
        <%= f.label :technique %>
        <p><%= @object.technique %></p>
      </div>
      <% end %>
      <% if !@object.decoration.blank? %>
      <div class="info-field">
        <%= f.label :decoration %>
        <p><%= @object.decoration %></p>
      </div>
      <% end %>
      <% if !@object.owner.blank? %>
      <div class="info-field">
        <%= f.label :owner %>
        <p><%= @object.owner %></p>
      </div>
      <% end %>
      <% if !@object.deposit.blank? || !@object.address.blank? || !@object.location.blank? %>
      <div class="info-field">
        <%= f.label :deposit %>
        <p><%= @object.deposit %></p>
        <p><%= @object.address %></p>
        <p><%= @object.location %></p>
        <% if @object.latitude && @object.longitude %>
          <p><%= "(#{@object.longitude}, #{@object.longitude})" %></p>
          <%= image_tag "http://maps.googleapis.com/maps/api/staticmap?center=#{@object.latitude},#{@object.longitude}&markers=#{@object.latitude},#{@object.longitude}&zoom=13&size=640x400&key=AIzaSyA5_37fS8M4baOAP7w8fiXCn-VA4FcgBSw", alt: "#{@object.address} on the map", class:'gmap' %>
        <% end %>
        <br/>
      </div>
      <% end %>
      <% if !@object.notes.blank? %>
        <div class="info-field">
          <%= f.label :notes %>
          <p><%= @object.notes %></p>
        </div>
      <% end %>
    </div>
  </section>
<% end %>

<div id="mini-branding" onclick="showToolbar()">
  <div class="branding mini-brand no-padding">
    <h1><i class="fas fa-bars"></i> FragmentX</h1>
  </div>
  <div id="mini-menu" class="no-padding">
    <%= link_to t('restored_object.viewer.back_to_gallery') , restored_objects_path %>
  </div>
</div>
<div id="measure">
    <div class="row ml-4 mr-4">
        <div class="col-sm measure-column">
          <p class="measure-paragraph"><%= t('restored_object.viewer.points') %></p>
          <p id="measurePo" class="measure-font">0</p>
        </div>
        <div class="col-sm measure-column">
          <p class="measure-paragraph"><%= t('restored_object.viewer.measure') %></p>
          <p id="measureNo" class="measure-font">0</p>
        </div>
        <div class="col-sm measure-column">
          <button onclick="deleteLastMesure()" class="btn btn-primary measure-button"><img class="measure-image" src="/icons/removeLast.svg" /><br/><%= t('restored_object.viewer.rem_last') %></button>
        </div>
        <div class="col-sm measure-column">
          <button onclick="resetMesures()" class="btn btn-primary measure-button"><img class="measure-image" src="/icons/removeAll.svg" /><br/><%= t('restored_object.viewer.rem_all') %></button>
        </div>
    </div>
</div>
<section id="toolbar">
  <div class="toolbar-container">
    <i class="pointer fas fa-times right main" onclick="hideToolbar()"></i>
    <br/>
    <div class="toolbar-section">
        <p><%= t('restored_object.viewer.vis_mode') %></p>
        <div class="toolbar-section-row">
        <button onclick="allParts()" class="btn btn-primary toolbar-button"><img class="svg-icon" src="/icons/all.svg" /><br/><%= t('restored_object.viewer.all') %></button>
        <button onclick="goodParts()" class="btn btn-primary toolbar-button"><img class="svg-icon" src="/icons/pieces.svg" /><br/><%= t('restored_object.viewer.present') %></button>
        <button onclick="faltantParts()" class="btn btn-primary toolbar-button"><img class="svg-icon" src="/icons/missing.svg" /><br/><%= t('restored_object.viewer.missing') %></button>
        </div>
        <div class="toolbar-section-row">
            <button onclick="nearbyPieces()" class="btn btn-primary toolbar-button big"><img class="inline-icon" src="/icons/pic.svg" /> <%= t('restored_object.viewer.nearby_pieces') %></button>
        </div>
        <p><%= t('restored_object.viewer.model_rot') %></p>
        <div class="toolbar-section-row">
        <button id="pauseButton" onclick="changeRotationMode()" class="btn btn-primary toolbar-button big">
            <i class="fas fa-play"></i> Play
        </button>
        </div>
    </div>
    <div class="toolbar-section">
        <p><%= t('restored_object.viewer.perspective') %></p>
        <div class="toolbar-section-row">
        <button class="btn btn-primary toolbar-button" onclick="downCamera()"><img class="svg-icon" src="/icons/xz.svg" /><br/>XZ</button>
        <button class="btn btn-primary toolbar-button" onclick="upCamera()"><img class="svg-icon" src="/icons/xy.svg" /><br/>XY</button>
        <button class="btn btn-primary toolbar-button" onclick="leftCamera()"><img class="svg-icon" src="/icons/zy.svg" /><br/>ZY</button>
        </div>
    </div>
    <div class="toolbar-section">
        <p><%= t('restored_object.viewer.cut_obj') %></p>
        <div class="toolbar-section-row">
            <button onclick="setClip(0)" class="btn btn-primary toolbar-button clip-button">X</button>
            <input type="range" min="-1.2" max="1.2" step="0.01" value="0" class="slider" id="clipX">
        </div>
        <div class="toolbar-section-row">
            <button onclick="setClip(1)" class="btn btn-primary toolbar-button clip-button">Y</button>
            <input type="range" min="-1.2" max="1.2" step="0.01" value="0" class="slider" id="clipY">
        </div>
        <div class="toolbar-section-row">
            <button onclick="setClip(2)" class="btn btn-primary toolbar-button clip-button">Z</button>
            <input type="range" min="-1.2" max="1.2" step="0.01" value="0" class="slider" id="clipZ">
        </div>
    </div>
    <div class="toolbar-section">
        <p><%= t('restored_object.viewer.tools') %></p>
        <div class="toolbar-section-row extras">
            <button class="btn btn-primary toolbar-button" onclick="measures()"><img class="svg-icon" src="/icons/ruler.svg" /><br/><%= t('restored_object.viewer.measure') %></button>
            <button class="btn btn-primary toolbar-button" onclick="wireframeSet()"><img class="svg-icon" src="/icons/wireframe.svg" /><br/><%= t('restored_object.viewer.wireframe') %></button>
            <button class="btn btn-primary toolbar-button" onclick="addTorch()"><img class="svg-icon" src="/icons/light.svg" /><br/><%= t('restored_object.viewer.light') %></button>
        </div>
        <div class="toolbar-section-row">
            <button onclick="saveAsImage()" class="btn btn-primary toolbar-button big"><img class="inline-icon" src="/icons/pic.svg" /> <%= t('restored_object.viewer.save_img') %></button>
        </div>
        </div>
    </div>
    <div class="branding">
      <h1 class="brand-title">2018 - 2020 | FragmentX</h1>
    </div>
  </div>
</section>
<div id="editor"></div>

  <script type="text/javascript" src="/js/three.min.js"></script>
  <script type="text/javascript" src="/js/OrbitControls.js"></script>
  <script type="text/javascript" src="/js/LoaderSupport.js"></script>
  <script type="text/javascript" src="/js/MTLLoader.js"></script>
  <script type="text/javascript" src="/js/OBJLoader2.js"></script>
  <script type="text/javascript" src="/js/EffectComposer.js"></script>
  <script type="text/javascript" src="/js/CopyShader.js"></script>
  <script type="text/javascript" src="/js/ShaderPass.js"></script>
  <script type="text/javascript" src="/js/OutlinePass.js"></script>
  <script type="text/javascript" src="/js/RenderPass.js"></script>
  <script>

  function hideToolbar() {
    $('#toolbar').animate({
      opacity: 0.25,
      left: "-=1000"
    }, 500);
  }

  function showToolbar() {
    $('#toolbar').animate({
      opacity: 1,
      left: "0"
    }, 500);
  }

  function hideInfo() {
    $('#info-container').animate({
      opacity: 0.25,
      right: "-=1000"
    }, 500);
  }

  function showInfo() {
    hideMeasurebar();
    if (measure) {
      measures();
    }
    $('#info-container').animate({
      opacity: 1,
      right: "0"
    }, 500);
  }

  function hideMeasurebar() {
    $('#measure').animate({
      opacity: 0.25,
      bottom: "-=1000"
    }, 500);
  }

  function showMeasurebar() {
    hideInfo();
    $('#measure').animate({
      opacity: 1,
      bottom: "0"
    }, 500);
  }

  //var arrow          = null;
  var nearbyPiecesMode = false;
  var selection        = null;
  var wireframeMode    = false;
  var torchMode        = false;
  var rotationMode     = false;
  var measure          = false;
  var spotLight        = null;
  var delayTime        = 0;
  var strDownloadMime  = "image/octet-stream";
  var mouse            = new THREE.Vector2();

  var model_type       = 'obj'; //TODO

  var globalPlaneX = new THREE.Plane( new THREE.Vector3( -1,  0,  0 ),10000 );
  var globalPlaneY = new THREE.Plane( new THREE.Vector3(  0, -1,  0 ),10000 );
  var globalPlaneZ = new THREE.Plane( new THREE.Vector3(  0,  0, -1 ),10000 );

  var clippingPlanes = [ globalPlaneX, globalPlaneY, globalPlaneZ ], Empty = Object.freeze( [] );

  var clipping = [false, false, false];

  let objectSize = [0, 0, 0];
  let objectMaxSide = 0;

  var inputs = $('input[type=range]');

  $('#clipX').on('input', function() { clip(0) });
  $('#clipY').on('input', function() { clip(1) });
  $('#clipZ').on('input', function() { clip(2) });

  function clip(coord) {
    if (clipping[coord]) clippingPlanes[coord].constant = inputs[coord].value * objectSize[coord];
  }

  function unclip(coord) {
    clippingPlanes[coord].constant = 10000;
  }

  function setClip(coord) {
    clipping[coord] = !clipping[coord];
    if (clipping[coord]) clip(coord);
    else unclip(coord);
  }

  var bBoxes    = [];
  var bbObjects = [];

  var object  = new THREE.Object3D();
  var pieces  = [];

  var objectF   = new THREE.Object3D();
  var faltants  = [];

  var mesurePoints   = new THREE.Object3D();
  var mesurePointsList = [];

  var camera  = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 10000);

  var renderer = new THREE.WebGLRenderer({
    preserveDrawingBuffer: true,
    antialias: true,
    alpha: true,
    localClippingEnabled : true
  });

  renderer.clippingPlanes = clippingPlanes;

  // Spheres of light, world and measure
  var geometry = new THREE.SphereGeometry( 5, 32, 32 );
  var material = materialFactory(true, 0xffff00, THREE.DoubleSide, clippingPlanes, true, false, 1, false);

  var sphere = new THREE.Mesh( geometry, material );

  var geometryWorld = new THREE.SphereGeometry( 100, 32, 32 );
  materialWorld = materialFactory(true, 0xffffff, THREE.DoubleSide, clippingPlanes, true, true, 0.0, true);

  var sphereWorld = new THREE.Mesh( geometryWorld, materialWorld );

  var geometryMesure; 

  var scene = new THREE.Scene();
  scene.add(object);
  scene.add(objectF);
  scene.add(sphereWorld);

  // render
  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.autoClear = true;
  renderer.setClearColor(0xffffff, 0.0);
  renderer.shadowMap.enabled = false;
  renderer.shadowMap.type = THREE.PCFSoftShadowMap;

  $('#editor').append(renderer.domElement);

  // raycaster
  raycaster = new THREE.Raycaster();

  // outliner
  var composer = new THREE.EffectComposer( renderer );
  var renderPass = new THREE.RenderPass( scene, camera );
  composer.addPass( renderPass );
  var outlinePass = new THREE.OutlinePass( new THREE.Vector2( window.innerWidth, window.innerHeight ), scene, camera );
  composer.addPass( outlinePass );

  var onTexLoad = function ( texture ) {
		outlinePass.patternTexture = texture;
		texture.wrapS = THREE.RepeatWrapping;
		texture.wrapT = THREE.RepeatWrapping;
	};

	var loader = new THREE.TextureLoader();

	loader.load( '/tri_pattern.jpg', onTexLoad );

  var outputPass = new THREE.ShaderPass( THREE.CopyShader );
  outputPass.renderToScreen = true;
  composer.addPass( outputPass );

  // Selection material
  selectionMaterial  = materialFactory(false, 0x40e0d0, THREE.DoubleSide, clippingPlanes, true, false, 1, false);

  // Normal material
  unselectedMAterial = materialFactory(false, 0xcdb380, THREE.DoubleSide, clippingPlanes, true, false, 1, false);

  // Wireframe material
  wireframeMaterial  = materialFactory(true, 0xe8ddcb, THREE.DoubleSide, clippingPlanes, true, false, 1, true);

  // Wireframe material
  wireframeMaterialSelected = materialFactory(true, 0x40e0d0, THREE.DoubleSide, clippingPlanes, true, false, 1, true);

  // Translucid material
  var materialTranslucid = materialFactory(true, 0xffffff, THREE.DoubleSide, clippingPlanes, true, true, 0.1, false);

  // Measure material
  materialOne = materialFactory(true, 0x3601d8, THREE.DoubleSide, clippingPlanes, true, false, 1, false);


  // mousemove
  window.addEventListener( 'mousemove', onmousemove, false );
  function onmousemove(event) {
    mouse.x =  (event.clientX / window.innerWidth) * 2 - 1;
    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
  };

  // Set up camera
  camera.position.z = 30;
  camera.lookAt(new THREE.Vector3(0, 0, 0));
  scene.add(camera);

  var clock = new THREE.Clock();

  // Set up orbit, pan, zoom controls
  controls = new THREE.OrbitControls(camera, renderer.domElement);
  controls.enableZoom = true;
  controls.addEventListener('change', function() {
    return render;
  });

  // Set up Lights
  directionalLight = new THREE.DirectionalLight(0xffaa44, 0.8, 100);
  directionalLight.position.set(10, 5, 10);
  directionalLight.castShadow = true;
  scene.add(directionalLight);

  light = new THREE.AmbientLight(0xffffff, 0.5);
  light.position.set(5, 1, 1);
  light.castShadow = true;
  scene.add(light);

  window.addEventListener( 'resize', onWindowResize, false );

  function onWindowResize() {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    camera.lookAt(scene.position);
    renderer.setSize(window.innerWidth, window.innerHeight);
    composer.setSize( window.innerWidth, window.innerHeight );
    raycaster.setFromCamera(mouse, camera);
    //renderer.render(scene, camera);
    composer.render();
    controls.update();
  };

  var render = function() {
    requestAnimationFrame(render);
    var delta = clock.getDelta();
    if(rotationMode) {
      object.rotation.y  += delta/4;
      objectF.rotation.y += delta/4;
    }
    //renderer.render(scene, camera);
    composer.render();
  };

  render();

  var rotateM = new THREE.Matrix4();
  rotateM.set(
          1,  0, 0, 0,
          0,  0, 1, 0,
          0, -1, 0, 0,
          0,  0, 0, 1
  );

  var w = new Array(gon.pieces.length);
  var loaded = gon.pieces.length;
  function startWorker() {
    for(let index = 0; index < gon.pieces.length; index++) {
      setWorker(index);
    }
  }
  

  function setWorker(index) {
    if (typeof(Worker) !== "undefined") {
      if (model_type == 'ply') {
        w[index] = new Worker('/js/PLYparseModel.js');
      } else if (model_type == 'stl') {
        w[index] = new Worker('/js/STLparseModel.js');
      } else if (model_type == 'obj') {
        w[index] = new Worker('/js/OBJparseModel.js');
      }

      var loader = new THREE.OBJLoader2();

      if (model_type == 'obj') {
        var callbackOnLoad = function ( event ) {
          loader.workerSupport.setTerminateRequested( true );

          var local = new THREE.Object3D();
          local.name = 'pivot' + gon.pieces[index];
          local.position.set( 0, 0, 0 );
          var scale = 0.5;
          local.scale.set( scale, scale, scale );
          if( !gon.missings[index] ) {
            pieces.push(local);
            object.add(local);
          } else {
            faltants.push(local);
            objectF.add(local);
          }
          local.add( event.detail.loaderRootNode );

          local.traverse( function( node ) {
            if ( node instanceof THREE.Mesh ) {
                var geo = new THREE.Geometry().fromBufferGeometry( node.geometry);
                geo.mergeVertices();
                geo.computeFaceNormals();
                geo.computeVertexNormals(); 
                node.geometry = geo;
            }
          } );

          loaded--;
          if (loaded == 0) {
            $('#loader').hide();

            var offset = offset || 1.25;

            const boundingBox = new THREE.Box3();

            // get bounding box of object - this will be used to setup controls and camera
            boundingBox.setFromObject( object );

            const center = boundingBox.getCenter();

            const size = boundingBox.getSize();

            objectSize[0] = size.x;
            objectSize[1] = size.y;
            objectSize[2] = size.z;

            // get the max side of the bounding box (fits to width OR height as needed )
            const maxDim = Math.max( size.x, size.y, size.z );
            const fov = camera.fov * ( Math.PI / 180 );
            let cameraZ = Math.abs( maxDim / Math.tan( fov * 2 ) );

            geometryMesure = new THREE.SphereGeometry( 0.01 * maxDim, 32, 32 );

            cameraZ *= offset; // zoom out a little so that objects don't fill the screen

            camera.position.z = cameraZ;

            const minZ = boundingBox.min.z;
            //const cameraToFarEdge = ( minZ < 0 ) ? -minZ + cameraZ : cameraZ - minZ;

            //camera.far = cameraToFarEdge * 300;
            camera.updateProjectionMatrix();

            if ( controls ) {

              // set camera to rotate around center of loaded object
              controls.target = center;

              // prevent camera from zooming out far enough to create far plane cutoff
              //controls.maxDistance = cameraToFarEdge * 2;

              controls.saveState();
            } else {
              camera.lookAt( center );
            }

            controls.reset();
          }
          
        };

        var onLoadMtl = function ( materials ) {
          loader.setModelName( gon.pieces[index] );
          loader.setMaterials( materials );
          loader.terminateWorkerOnLoad = false;
          loader.load(gon.pieces[index], callbackOnLoad, null, null, null, true );
        };
        loader.loadMtl(gon.materials[index], null, onLoadMtl );
      } else {
        w[index].addEventListener("message", function (event) {          
          var abuffer = event.data.buffer;
          var vertices = new Float32Array(abuffer);
          var buffer = new THREE.BufferAttribute(vertices, 3);
          var geo = new THREE.BufferGeometry();
          geo.addAttribute('position',  buffer);
          geo.computeVertexNormals();
          var child = new THREE.Mesh(geo, unselectedMAterial);
          child.scale.multiplyScalar( 0.01 );
          child.rotation.y += Math.PI;
          child.castShadow = true;
          child.receiveShadow = true;
          child.scale.multiplyScalar( 1000 );
          var scaleMatrix = new THREE.Matrix4();

          var matrix = new THREE.Matrix4();
          if (gon.matrices[index].trim().length != 0)
            scaleMatrix.fromArray(gon.matrices[index].trim().split(' ').filter(function(val) { return val.length != 0; })).transpose();
          scaleMatrix.multiplyMatrices ( rotateM, scaleMatrix );

          child.geometry.applyMatrix(scaleMatrix);
          child.geometry.verticesNeedUpdate = true;

          if( !gon.missings[index] ) {
            pieces.push(child);
            object.add(child);
          } else {
            faltants.push(child);
            objectF.add(child);
          }
          loaded--;
          if (loaded == 0) {
            $('#loader').hide();

            var offset = offset || 1.25;

            const boundingBox = new THREE.Box3();

            // get bounding box of object - this will be used to setup controls and camera
            boundingBox.setFromObject( object );

            const center = boundingBox.getCenter();

            const size = boundingBox.getSize();

            // get the max side of the bounding box (fits to width OR height as needed )
            const maxDim = Math.max( size.x, size.y, size.z );
            const fov = camera.fov * ( Math.PI / 180 );
            let cameraZ = Math.abs( maxDim / 4 * Math.tan( fov * 2 ) );

            cameraZ *= offset; // zoom out a little so that objects don't fill the screen

            camera.position.z = cameraZ;

            const minZ = boundingBox.min.z;
            const cameraToFarEdge = ( minZ < 0 ) ? -minZ + cameraZ : cameraZ - minZ;

            camera.far = cameraToFarEdge * 3;
            camera.updateProjectionMatrix();

            if ( controls ) {

              // set camera to rotate around center of loaded object
              controls.target = center;

              // prevent camera from zooming out far enough to create far plane cutoff
              controls.maxDistance = cameraToFarEdge * 2;

              controls.saveState();

            } else {
              camera.lookAt( center );
            }
          }
        }, false);
        w[index].postMessage(gon.pieces[index]);
      }
    } else {
      console.log("Sorry, your browser does not support Web Workers...");
    }     
  }

  renderer.domElement.addEventListener('mousedown', function(event) {
    var d = new Date();
    delayTime = d.getTime();
  })

  renderer.domElement.addEventListener('mouseup', function(event) {
    var d = new Date();
    var deldel = d.getTime() - delayTime;
    if( deldel < 300) {
      var intersects, selected;
      event.preventDefault();
      raycaster.setFromCamera(mouse, camera);
      intersects = raycaster.intersectObjects(pieces.concat(faltants), true);
      /*if(!wireframeMode) {
        if(selection !== null) {
          selection.material = unselectedMAterial;
        }
      } else {
        if(selection !== null) {
          selection.material = wireframeMaterial;
        }
      }*/
      if (intersects.length > 0) {
        //resetMaterial();
        if (measure) {
          if (event.button == 0) {
            var sphereOne = new THREE.Mesh( geometryMesure, materialOne );
            sphereOne.position.set( intersects[ 0 ].point.x , intersects[ 0 ].point.y, intersects[ 0 ].point.z );
            mesurePointsList.push(sphereOne);
            mesurePoints.add(sphereOne);
            document.getElementById("measureNo").innerHTML = countMesure() + gon.units;;
            document.getElementById("measurePo").innerHTML = mesurePointsList.length;
            scene.add(mesurePoints);
          } else {
            intersects = raycaster.intersectObjects(mesurePointsList);
            var indexForRemove = mesurePointsList.indexOf(intersects[0].object);
            if (indexForRemove > -1) {
              mesurePointsList.splice(indexForRemove, 1);
            }
            mesurePoints.remove(intersects[0].object);
            document.getElementById("measurePo").innerHTML = mesurePointsList.length;
            document.getElementById("measureNo").innerHTML = countMesure() + gon.units;
          }
        } else {
          selected = intersects[0].object;
          outlinePass.selectedObjects = selected;
          /*if(!wireframeMode) {
            selected.material = selectionMaterial;
          } else {
            selected.material = wireframeMaterialSelected;
          }*/
          selection = selected;
        }
      } else {
        selection = null;
        if(torchMode & (event.button == 1)) {
          intersects = raycaster.intersectObjects([sphereWorld]);
          scene.remove(sphere);
          sphere.position.set( intersects[ 0 ].point.x , intersects[ 0 ].point.y, intersects[ 0 ].point.z );
          scene.add(sphere);
          spotLight.position.set( intersects[ 0 ].point.x, intersects[ 0 ].point.y, intersects[ 0 ].point.z );
        }
      }
    }
  });

  startWorker();

  function resetMaterial() {
    selection = null;
    if( wireframeMode ) {
      for(var i = 0; i < bBoxes.length; i++) {
        bbObjects[i].material = wireframeMaterial;
      }
    } else {
      for(var i = 0; i < bBoxes.length; i++) {
        bbObjects[i].material = unselectedMAterial;
      }
    }
  }

  function goodParts() {
    allParts();
    scene.remove(objectF);
    resetMaterial();
  }

  function allParts() {
    scene.add(object);
    scene.add(objectF);
    resetMaterial();
  }

  function faltantParts() {
    allParts();
    scene.remove(object);
    resetMaterial();
  }

  function upCamera() {
    var offset = offset || 1.25;

    const boundingBox = new THREE.Box3();

    // get bounding box of object - this will be used to setup controls and camera
    boundingBox.setFromObject( object );

    const center = boundingBox.getCenter();

    const size = boundingBox.getSize();

    // get the max side of the bounding box (fits to width OR height as needed )
    const maxDim = Math.max( size.x, size.y, size.z );
    const fov = camera.fov * ( Math.PI / 180 );
    let cameraZ = Math.abs( maxDim / Math.tan( fov * 2 ) );

    cameraZ *= offset; // zoom out a little so that objects don't fill the screen
    camera.position.z = cameraZ;
    camera.position.y = 0;
    camera.position.x = 0;
    controls.update();
    //camera.lookAt(new THREE.Vector3(0, 0, 0));
  }

  function downCamera() {
    var offset = offset || 1.25;

    const boundingBox = new THREE.Box3();

    // get bounding box of object - this will be used to setup controls and camera
    boundingBox.setFromObject( object );

    const center = boundingBox.getCenter();

    const size = boundingBox.getSize();

    // get the max side of the bounding box (fits to width OR height as needed )
    const maxDim = Math.max( size.x, size.y, size.z );
    const fov = camera.fov * ( Math.PI / 180 );
    let cameraZ = Math.abs( maxDim / Math.tan( fov * 2 ) );

    cameraZ *= offset; // zoom out a little so that objects don't fill the screen
    camera.position.z = 0;
    camera.position.y = cameraZ;
    camera.position.x = 0;
    controls.update();
    //camera.lookAt(new THREE.Vector3(0, 0, 0));
  }

  function leftCamera() {
    var offset = offset || 1.25;

    const boundingBox = new THREE.Box3();

    // get bounding box of object - this will be used to setup controls and camera
    boundingBox.setFromObject( object );

    const center = boundingBox.getCenter();

    const size = boundingBox.getSize();

    // get the max side of the bounding box (fits to width OR height as needed )
    const maxDim = Math.max( size.x, size.y, size.z );
    const fov = camera.fov * ( Math.PI / 180 );
    let cameraZ = Math.abs( maxDim / Math.tan( fov * 2 ) );

    cameraZ *= offset; // zoom out a little so that objects don't fill the screen
    camera.position.z = 0;
    camera.position.y = 0;
    camera.position.x = cameraZ;
    controls.update();
    //camera.lookAt(new THREE.Vector3(0, 0, 0));
  }

  function measures() {
    measure = !measure;
    if(measure){
      showMeasurebar();
    } else {
      hideMeasurebar();
      scene.remove(mesurePoints);
      resetMesures();
    }
  }

  function resetMesures() {
    scene.remove(mesurePoints);
    mesurePoints = new THREE.Object3D();
    mesurePointsList = [];
    document.getElementById("measurePo").innerHTML = 0;
    document.getElementById("measureNo").innerHTML = 0;
  }

  function deleteLastMesure() {
    mesurePoints.remove(mesurePointsList.pop());
    document.getElementById("measurePo").innerHTML = mesurePointsList.length;
    document.getElementById("measureNo").innerHTML = countMesure();
  }

  function countMesure() {
    var result = 0;
    for (var i=0; i<(mesurePointsList.length-1); i++) {
      var positionPointAnterior  = mesurePointsList[i].getWorldPosition();
      var positionPointNow = mesurePointsList[i+1].getWorldPosition();
      var distanceX = positionPointAnterior.x - positionPointNow.x;
      distanceX = distanceX * gon.width / objectSize[0];
      var distanceY = positionPointAnterior.y - positionPointNow.y;
      distanceY = distanceY * gon.height / objectSize[1];
      var distanceZ = positionPointAnterior.z - positionPointNow.z;
      distanceZ = distanceZ * gon.depth / objectSize[2];
      var distance  = Math.sqrt(distanceX*distanceX+distanceY*distanceY+distanceZ*distanceZ);
      result += distance;
    }
    return precisionRound(result,1);
  }

  function precisionRound(number, precision) {
    var factor = Math.pow(10, precision);
    return Math.round(number * factor) / factor;
  }

  function addTorch() {
    if(!torchMode) {
    renderer.shadowMap.enabled = true;
    spotLight = new THREE.SpotLight( 0xffffff, 0.5 );
    spotLight.position.set( 15, 40, 35 );
    spotLight.angle = Math.PI / 4;
    spotLight.penumbra = 0.05;
    spotLight.decay = 2;
    spotLight.distance = 200;
    spotLight.castShadow = true;
    spotLight.shadow.mapSize.width = 1024;
    spotLight.shadow.mapSize.height = 1024;
    spotLight.shadow.camera.near = 10;
    spotLight.shadow.camera.far = 2000;
    scene.add( spotLight );
    } else{
      renderer.shadowMap.enabled = false;
      scene.remove( spotLight );
      scene.remove( sphere );
    }
    torchMode = !torchMode;
  }

  function nearbyPieces() {
    if (selection !== null) {
      var box3 = new THREE.Box3();
      var box = new THREE.BoxHelper( selection, 0xffff00 );
      box3.setFromObject( box );
      var counter = 0;
      for(var i = 0; i < bBoxes.length; i++) {
        var checker = box3.intersectsBox( bBoxes[i] );
        if(checker){
          counter = counter + 1;
          if( wireframeMode ) {
            bbObjects[i].material = wireframeMaterial;
          } else {
            bbObjects[i].material = unselectedMAterial;
          }
        }
        else {
          bbObjects[i].material = materialTranslucid;
        }
      }
      if( wireframeMode ) {
        selection.material = wireframeMaterialSelected;
      } else {
        selection.material = selectionMaterial;
      }
    }
  }

  function changeRotationMode() {
    rotationMode = !rotationMode;
    if ($('#pauseButton').html().indexOf("Pause") >= 0) {
      $('#pauseButton').html('<i class="fas fa-play"></i> Play');
    } else {
       $('#pauseButton').html('<i class="fas fa-pause"></i> Pause');
    }
  }

  function materialFactory(basic, colorF, sideF, clippingPlanesF, clipShadowsF, transparentF, opacityF, wireframeF) {
    var materialServed;
    if (basic) {
      materialServed = new THREE.MeshLambertMaterial( {
        color: colorF,
        side: sideF,
        clippingPlanes: clippingPlanesF,
        clipShadows: clipShadowsF,
        transparent: transparentF,
        wireframe: wireframeF,
        opacity: opacityF} );
    } else {
      materialServed = new THREE.MeshLambertMaterial({
        color: colorF,
        side: sideF,
        clippingPlanes: clippingPlanesF,
        clipShadows: clipShadowsF,
        transparent: transparentF,
        wireframe: wireframeF,
        opacity: opacityF});
    }
    return materialServed;
  }

  function saveAsImage() {
    var imgData, imgNode;
    try {
      var strMime = "image/jpeg";
      imgData = renderer.domElement.toDataURL(strMime);
      saveFile(imgData.replace(strMime, strDownloadMime), "test.jpg");
    } catch (e) {
      console.log(e);
      return;
    }

  }

  function wireframeSet() {
    var index;
    var allpieces =  pieces.concat(faltants);
    for(index = 0; index < allpieces.length; index++) {
      if(!wireframeMode) {
        allpieces[index].material = wireframeMaterial;
      } else {
        allpieces[index].material = unselectedMAterial;
      }
    }
    wireframeMode = !wireframeMode;
  }

  var saveFile = function (strData, filename) {
    var link = document.createElement('a');
    if (typeof link.download === 'string') {
      document.body.appendChild(link);
      link.download = filename;
      link.href = strData;
      link.click();
      document.body.removeChild(link);
    } else {
      location.replace(uri);
    }
  }

  </script>
